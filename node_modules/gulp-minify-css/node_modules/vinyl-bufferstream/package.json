{
  "name": "vinyl-bufferstream",
  "version": "1.0.1",
  "description": "Deal with vinyl file contents, regardless of whether it is Buffer/Stream",
  "repository": {
    "type": "git",
    "url": "https://github.com/shinnn/vinyl-bufferstream"
  },
  "author": {
    "name": "Shinnosuke Watanabe",
    "url": "https://github.com/shinnn"
  },
  "scripts": {
    "pretest": "jscs *.js && eslint *.js",
    "test": "node test.js | tap-spec",
    "coverage": "istanbul cover test.js",
    "coveralls": "${npm_package_scripts_coverage} && istanbul-coveralls"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/shinnn/vinyl-bufferstream/blob/master/LICENSE"
    }
  ],
  "files": [
    "index.js"
  ],
  "keywords": [
    "gulpfriendly",
    "gulp",
    "vinyl",
    "buffer",
    "stream",
    "compatibility",
    "interchangeability",
    "internal",
    "helper"
  ],
  "dependencies": {
    "bufferstreams": "1.0.1"
  },
  "devDependencies": {
    "eslint": "^0.14.1",
    "istanbul": "^0.3.5",
    "istanbul-coveralls": "^1.0.1",
    "jscs": "^1.11.2",
    "simple-bufferstream": "0.0.4",
    "tap-spec": "^2.2.1",
    "tape": "^3.5.0",
    "vinyl": "^0.4.6"
  },
  "jscsConfig": {
    "preset": "google",
    "maximumLineLength": 98,
    "requireBlocksOnNewline": true,
    "validateLineBreaks": "LF"
  },
  "readme": "# vinyl-bufferstream\n\n[![NPM version](https://img.shields.io/npm/v/vinyl-bufferstream.svg?style=flat)](https://www.npmjs.com/package/vinyl-bufferstream)\n[![Build Status](https://img.shields.io/travis/shinnn/vinyl-bufferstream.svg?style=flat)](https://travis-ci.org/shinnn/vinyl-bufferstream)\n[![Build status](https://ci.appveyor.com/api/projects/status/gqc8t4mju49p6fkn?svg=true)](https://ci.appveyor.com/project/ShinnosukeWatanabe/vinyl-bufferstream)\n[![Coverage Status](https://img.shields.io/coveralls/shinnn/vinyl-bufferstream.svg?style=flat)](https://coveralls.io/r/shinnn/vinyl-bufferstream)\n[![Dependency Status](https://img.shields.io/david/shinnn/vinyl-bufferstream.svg?style=flat&label=deps)](https://david-dm.org/shinnn/vinyl-bufferstream)\n[![devDependency Status](https://img.shields.io/david/dev/shinnn/vinyl-bufferstream.svg?style=flat&label=devDeps)](https://david-dm.org/shinnn/vinyl-bufferstream#info=devDependencies)\n\nDeal with [vinyl file](https://github.com/wearefractal/vinyl) contents, regardless of whether it is Buffer/Stream\n\n```javascript\nvar through = require('through2');\nvar VinylBufferStream = require('vinyl-bufferstream');\n\nfunction yourGulpPlugin() {\n  var vinylBufferStream = new VinylBufferStream(function(buf, done) {\n    syncOrAsyncFn(buf, done); \n  });\n\n  return through.obj(function(file, enc, cb) {\n    vinylBufferStream(file, function(err, contents) {\n      if (err) {\n        self.emit('error', err);\n      } else {\n        file.contents = contents;\n        self.push(file);\n      }\n      cb();\n    });\n  });\n}\n```\n\n## Installation\n\n[Use npm.](https://docs.npmjs.com/cli/install)\n\n```sh\nnpm install vinyl-bufferstream\n```\n\n## API\n\n```javascript\nvar VinylBufferStream = require('vinyl-bufferstream');\n```\n\n### vinylBufferStream = new VinylBufferStream(*transformFunction*)\n\n(`new` operator is optional.)\n\n*transformFunction*: `Function`  \nReturn: `Function`\n\nThe argument must be a function taking a [`Buffer`][buffer] and a callback function as its first and second argument, which calls the callback function with passing [Node](http://nodejs.org/)-style callback arguments (`error, result`).\n\n#### vinylBufferStream(*file*, *callback*)\n\n*file*: `Object` ([vinyl file](https://github.com/wearefractal/vinyl#file) object)  \n*callback*: `Function`\n\nWhen the [`file.contents`](https://github.com/wearefractal/vinyl#optionscontents) is a [`Buffer`][buffer], it will call the *transformFunction* with passing file.contents to the first argument.\n\nWhen the `file.contents` is a [`Stream`][buffer], it will call the *transformFunction* with passing the buffered stream of file.contents to the first argument.\n\nWhen the `file.contents` is a [`Stream`][stream], it won't call the *transformFunction*.\n\n##### callback(err, contents)\n\n*error*: `Error` or `null`  \n*contents*: [`Buffer`][buffer] or [`Stream`][stream]\n\nWhen the `file.contents` is a [`Buffer`][buffer], *contents* will be a result that *transformFunction* produces.\n\nWhen the `file.contents` is a [`Stream`][stream], *contents* will be a stream that emits a data *transformFunction* produces.\n\nWhen the `file.contents` is `null`, *contents* will be `null`.\n\n```javascript\nvar gulp = require('gulp');\nvar SVGO = require('svgo');\nvar through = require('through2');\nvar VinylBufferStream = require('vinyl-bufferstream');\n\nfunction svgminPlugin(options) {\n  var svgo = new SVGO(options);\n  var vinylBufferStream = new VinylBufferStream(function(buf, done) {\n    svgo.optimize(String(buf), function(result) {\n      if (result.error) {\n        done(result.error);\n        return;\n      }\n      done(null, result.data);\n    });\n  });\n\n  return through.obj(function(file, enc, cb) {\n    vinylBufferStream(file, function(err, contents) {\n      if (err) {\n        self.emit('error', err);\n      } else {\n        file.contents = contents;\n        self.push(file);\n      }\n      cb();\n    });\n  });\n}\n\ngulp.task('buffer', function() {\n  return gulp.src('*.svg')\n    .pipe(svgminPlugin())\n    .pipe(gulp.dest('dest'));\n});\n\ngulp.task('stream', function() {\n  return gulp.src('*.svg', {buffer: false})\n    .pipe(svgminPlugin())\n    .pipe(gulp.dest('dest'));\n});\n```\n\n## License\n\nCopyright (c) 2014 - 2015 [Shinnosuke Watanabe](https://github.com/shinnn)\n\nLicensed under [the MIT License](./LICENSE).\n\n[buffer]: https://iojs.org/api/buffer.html#buffer_class_buffer\n[stream]: https://iojs.org/api/stream.html\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/shinnn/vinyl-bufferstream/issues"
  },
  "homepage": "https://github.com/shinnn/vinyl-bufferstream",
  "_id": "vinyl-bufferstream@1.0.1",
  "_shasum": "0537869f580effa4ca45acb47579e4b9fe63081a",
  "_from": "https://registry.npmjs.org/vinyl-bufferstream/-/vinyl-bufferstream-1.0.1.tgz",
  "_resolved": "https://registry.npmjs.org/vinyl-bufferstream/-/vinyl-bufferstream-1.0.1.tgz"
}
