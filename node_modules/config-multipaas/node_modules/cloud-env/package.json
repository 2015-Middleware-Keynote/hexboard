{
  "name": "cloud-env",
  "homepage": "https://github.com/ryanj/cloud-env",
  "repository": {
    "type": "git",
    "url": "https://github.com/ryanj/cloud-env.git"
  },
  "version": "0.1.1",
  "description": "Consistent naming for cloud-provided server config strings",
  "dependencies": {},
  "devDependencies": {
    "tap": "^0.4.13"
  },
  "keywords": [
    "config",
    "paas",
    "openshift",
    "heroku",
    "env",
    "configuration"
  ],
  "main": "index.js",
  "author": {
    "name": "ryanj"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ryanj/cloud-env/issues"
  },
  "readme": "#cloud-env [![npm version](http://img.shields.io/npm/v/cloud-env.svg)](https://www.npmjs.org/package/cloud-env) [![Build Status](http://img.shields.io/travis/ryanj/cloud-env.svg)](https://travis-ci.org/ryanj/cloud-env)\n\n[cloud-env](https://github.com/ryanj/cloud-env) provides a vendor-neutral interface for autoconfiguring your server, allowing it to run on a variety of cloud hosting platforms.\n\nIt works by checking the system environment (`process.env`) for known configuration strings (published by [OpenShift](http://openshift.com/), [Heroku](http://heroku.com/)), normalizing the results into [a well-defined list](#configuration-strings).\n\n[![npm stats](https://nodei.co/npm/cloud-env.png?downloads=true&stars=true)](https://www.npmjs.org/package/cloud-env)\n\n[![Dependency Check](http://img.shields.io/david/ryanj/cloud-env.svg)](https://david-dm.org/ryanj/cloud-env) [![monthly downloads](http://img.shields.io/npm/dm/cloud-env.svg)](https://www.npmjs.org/package/cloud-env) [![license](http://img.shields.io/npm/l/cloud-env.svg)](https://www.npmjs.org/package/cloud-env)\n\n## Installation\n\nThe resulting config object contains the configuration settings that `cloud-env` was able to detect - including the server `PORT` number and bind `IP` address:\n\n``` js\n  //npm install cloud-env\n  var config = require('cloud-env')\n```\n\nSee the [Configuration Strings](#configuration-strings) list for more information about the settings that this module will automatically resolve.\n\n## Listen up\nMake sure to pass `config.PORT` and `config.IP` to your server's `listen` function:\n\n```js\napp.listen(config.PORT, config.IP, function () {\n  console.log(\"Listening on \"+config.IP+\", port \"+config.PORT)\n});\n```\n\nIf host-provided configs are not found, local development defaults are returned - allowing you to configure once, and run anywhere.\n\n### Provide your own defaults\nUse `.get('KEYNAME', default_value)` to fetch keys by name, optionally providing your own default values:\n\n```js\nport = config.get('PORT', 8000)\nbind_address = config.get('IP','127.0.0.1')\napp.listen(port, bind_address, function () {\n  console.log(\"Listening on \" + bind_address + \", port \" + port)\n});\n```\n\nThe above example will default to port `8000` instead of `8080`, and will attempt to bind on '127.0.0.0.1' instead of '0.0.0.0'.\n\n## Configuration Strings\nReliable configuration settings for local dev AND for \"the cloud\":\n\nconfig.NAME | DEFAULT | process.env.SOURCE_VARS \n--------------------|-----------|---------------\nIP                  | 0.0.0.0 | OPENSHIFT_NODEJS_IP, BIND_IP \nPORT                | 8080  | OPENSHIFT_NODEJS_PORT, PORT\nHOSTNAME            | localhost  | OPENSHIFT_APP_DNS, HOSTNAME \nAPP_NAME            | APP_NAME  | OPENSHIFT_APP_NAME, APP_NAME\nMONGODB_DB_URL      | mongodb://127.0.0.1:27017  | OPENSHIFT_MONGODB_DB_URL, MONGODB_DB_URL\nMONGODB_DB_HOST      | 127.0.0.1  | OPENSHIFT_MONGODB_DB_HOST, MONGODB_DB_HOST\nMONGODB_DB_PORT      | 27017  | OPENSHIFT_MONGODB_DB_PORT, MONGODB_DB_PORT\nMONGODB_DB_USERNAME      | undefined  | OPENSHIFT_MONGODB_DB_USERNAME, MONGODB_DB_USERNAME\nMONGODB_DB_PASSWORD      | undefined  | OPENSHIFT_MONGODB_DB_PASSWORD, MONGODB_DB_PASSWORD\nPOSTGRESQL_DB_URL   | postgresql://127.0.0.1:5432  | OPENSHIFT_POSTGRESQL_DB_URL, POSTGRESQL_DB_URL\nPOSTGRESQL_DB_HOST   | 127.0.0.1  | OPENSHIFT_POSTGRESQL_DB_HOST, POSTGRESQL_DB_HOST\nPOSTGRESQL_DB_PORT   | 5432  | OPENSHIFT_POSTGRESQL_DB_PORT, POSTGRESQL_DB_PORT\nPOSTGRESQL_DB_USERNAME   | undefined  | OPENSHIFT_POSTGRESQL_DB_USERNAME, POSTGRESQL_DB_USERNAME\nPOSTGRESQL_DB_PASSWORD   | undefined  | OPENSHIFT_POSTGRESQL_DB_PASSWORD, POSTGRESQL_DB_PASSWORD\nMYSQL_DB_URL      | mysql://127.0.0.1:3306  | OPENSHIFT_MYSQL_DB_URL, MYSQL_DB_URL\nMYSQL_DB_HOST      | 127.0.0.1  | OPENSHIFT_MYSQL_DB_HOST, MYSQL_DB_HOST\nMYSQL_DB_PORT      | 3306  | OPENSHIFT_MYSQL_DB_PORT, MYSQL_DB_PORT\nMYSQL_DB_USERNAME      | undefined  | OPENSHIFT_MYSQL_DB_USERNAME, MYSQL_DB_USERNAME\nMYSQL_DB_PASSWORD      | undefined  | OPENSHIFT_MYSQL_DB_PASSWORD, MYSQL_DB_PASSWORD\n\n### Advanced Configuration\n\nSee [`config-multipaas`](https://github.com/ryanj/config-multipaas/) and the related [`config-chain` API docs](https://github.com/dominictarr/config-chain/#boring-api-docs) for a more advanced configuration solution that incorporates the same set of cloud configuration keys.\n\n![MultiPaaS](http://i.imgur.com/fCi6YX6.png)\n",
  "readmeFilename": "README.md",
  "_id": "cloud-env@0.1.1",
  "_shasum": "d16da5ed7f6bb79e1510b770c8ea2ca01fe27112",
  "_from": "https://registry.npmjs.org/cloud-env/-/cloud-env-0.1.1.tgz",
  "_resolved": "https://registry.npmjs.org/cloud-env/-/cloud-env-0.1.1.tgz"
}
